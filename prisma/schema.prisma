generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String?            @unique
  password         String             @unique
  role             ROLE               @default(USER)
  hairStylist      HairStylist[]
  memberInfomation MemberInfomation[]
  booking          Booking[]

  @@map("user")
}

enum ROLE {
  ADMIN
  USER
}

model MemberInfomation {
  id          Int       @id @default(autoincrement())
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  nickName    String    @map("nick_name")
  gender      GENDER?
  birthDate   DateTime? @map("birth_date") @db.Date
  phoneNumber String    @map("phone_number") @db.VarChar(10)
  image       String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@map("member_infomation")
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

model HairStylist {
  id                 Int                  @id @default(autoincrement())
  hairStylistName    String               @map("hair_stylist_name")
  hairStylistImage   String?              @map("hair_stylist_image")
  workExpImage       String?              @map("work_exe_image")
  user               User                 @relation(fields: [userId], references: [id])
  hairStylistService HairStylistService[]
  userId             Int                  @map("user_id")
  booking            Booking[]

  @@map("hair_stylist")
}

model Service {
  id                 Int                  @id @default(autoincrement())
  serviceName        String               @map("service_name")
  price              Decimal              @db.Decimal()
  serviceImage       String?              @map("service_image")
  hairStylistService HairStylistService[]
  bookService        BookService[]

  @@map("service")
}

model HairStylistService {
  id            Int         @id @default(autoincrement())
  seveice       Service     @relation(fields: [serviceId], references: [id])
  serviceId     Int         @map("service_id")
  hairStylist   HairStylist @relation(fields: [hairStylistId], references: [id])
  hairStylistId Int         @map("hair_style_list_id")

  @@map("hair_stylist_service")
}

model Booking {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @map("user_id")
  bookDate       DateTime      @map("book_date") @db.Date
  bookTime       String        @map("book_time")
  urlDeposite    String?       @map("url_deposite")
  urlFullPay     String?       @map("url_full_pay")
  totalPrice     Decimal?      @map("total_price") @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  depositeStatus Boolean?      @map("deposite_status")
  bookService    BookService[]
  status         STATUS        @default(PENDING)
  hairStylist    HairStylist   @relation(fields: [hairStylistId], references: [id])
  hairStylistId  Int

  @@map("booking")
}

enum STATUS {
  PENDING
  ACCEPTED
  DENINED
}

model BookService {
  id        Int     @id @default(autoincrement())
  booking   Booking @relation(fields: [bookId], references: [id])
  bookId    Int     @map("book_id")
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int     @map("service_id")

  @@map("book_service")
}
